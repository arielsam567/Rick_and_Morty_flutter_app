// Mocks generated by Mockito 5.4.6 from annotations
// in ricky_and_martie_app/test/controllers/home_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ricky_and_martie_app/models/character.dart' as _i6;
import 'package:ricky_and_martie_app/models/paginated_response.dart' as _i5;
import 'package:ricky_and_martie_app/repositories/rickandmorty_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RickAndMortyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRickAndMortyRepository extends _i1.Mock
    implements _i3.RickAndMortyRepository {
  MockRickAndMortyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<String, _i5.PaginatedResponse<_i6.Character>>> getCharacters(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
          {#page: page},
        ),
        returnValue: _i4.Future<
                _i2.Either<String, _i5.PaginatedResponse<_i6.Character>>>.value(
            _FakeEither_0<String, _i5.PaginatedResponse<_i6.Character>>(
          this,
          Invocation.method(
            #getCharacters,
            [],
            {#page: page},
          ),
        )),
      ) as _i4
          .Future<_i2.Either<String, _i5.PaginatedResponse<_i6.Character>>>);

  @override
  _i4.Future<_i2.Either<String, _i6.Character>> getCharacterById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacterById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<String, _i6.Character>>.value(
            _FakeEither_0<String, _i6.Character>(
          this,
          Invocation.method(
            #getCharacterById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, _i6.Character>>);

  @override
  _i4.Future<_i2.Either<String, _i5.PaginatedResponse<_i6.Character>>>
      searchCharactersByName(
    String? name, {
    int? page = 1,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #searchCharactersByName,
              [name],
              {#page: page},
            ),
            returnValue: _i4.Future<
                    _i2.Either<String,
                        _i5.PaginatedResponse<_i6.Character>>>.value(
                _FakeEither_0<String, _i5.PaginatedResponse<_i6.Character>>(
              this,
              Invocation.method(
                #searchCharactersByName,
                [name],
                {#page: page},
              ),
            )),
          ) as _i4.Future<
              _i2.Either<String, _i5.PaginatedResponse<_i6.Character>>>);

  @override
  _i4.Future<_i2.Either<String, List<_i6.Character>>> getCharactersByIds(
          List<int>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharactersByIds,
          [ids],
        ),
        returnValue: _i4.Future<_i2.Either<String, List<_i6.Character>>>.value(
            _FakeEither_0<String, List<_i6.Character>>(
          this,
          Invocation.method(
            #getCharactersByIds,
            [ids],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, List<_i6.Character>>>);
}
